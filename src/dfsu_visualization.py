# Importing data ingestion engine to access data from dfsu files:
import dfsu_ingestion
# Importing data visualization packages:
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
# Importing Dash library packages:
import dash
import dash_core_components as dcc
import dash_html_components as html

'''
# TODO:

- Look into GIS map of area that indicates the location if the point input
- UPDATE DOCUMENTATION
- Add All timeseries plots to the plot_node_data method.
- Change Polar plot to used cardinal points vs degrees and include colorscale and
    marker.line.color array. to set custom color scale based on current speed. OR
    use autocolorscale see plotly polar plot documentation.
- Map Runtime for dashboard method.
'''

class dashboard(dfsu_ingestion.dfsu_ingestion_engine):
    '''
    The dashboard object is used to ingest data generated by the dfsu_ingestion_engine
    and provide an API that allows dashboards displaying the data to be generated and
    displayed using the plotly library.

    The object is initalized via a filepath and uses its various methods
    to return plotly figure objects that can be compiled into a dashboard.

    Parameters
    ----------
    filepath : str
        The filepath of the .dfsu file used to initalize the dfsu_ingestion_engine
    '''

    def __init__(self, filepath):

        self.filepath = filepath

        # Initalizing dfsu_ingestion_engine:
        super().__init__(filepath) # NOTE: initalizes ingestion engine internally.

        # Method that returns a figure representing the main dashboard of a single point:
    def plot_node_data(self, long, lat, depth):
        '''
        Method returns a plotly figure object containing all the relevant graphs
        for a dfsu file that contains the following data categories:
            - Current speed (meter per sec)
            - Density (kg per meter pow 3)
            - Temperature (degree Celsius)
            - Current direction (Horizontal) (radian)

        Parameters
        ----------
        long : float
            The longnitude value of the location point

        lat : float
            The latitude value of the location point

        depth : float
            The depth value of the location point

        Returns
        -------
        subplot_figure : plotly figure object
            This is the figure object that in this case contains subplots
            with all the relevant graphs plotted. It is intended to be placed
            passed into a Dash applicaiton or a Django view.
        '''

        # Creating the subplot format:
        fig = make_subplots(
            rows=3, cols=2,
            #shared_xaxes=True,
            #print_grid=True,
            vertical_spacing=0.5/3,
            subplot_titles=('Current Speed', 'Polar Plot of Speed and Direction\n',
            'Water Temperature', 'Water Density'),
            # Specifying the format types for each subplot:
            specs = [[{'type':'xy'}, {'rowspan': 3, 'type': 'polar'}],
                     [{'type':'xy'}, None],
                     [{'type':'xy'}, None]]
            )

        fig['layout'].update(height=800) # Pysical Size of Page

        # Creating dataframes that will be used to generate individual plots:
        current_speed = self.get_node_data(long, lat, depth, 'Current speed')
        temperature = self.get_node_data(long, lat, depth, 'Temperature')
        density = self.get_node_data(long, lat, depth, 'Density')
        polar_data = self.get_node_polar_coords(long, lat, depth)
        # Creating data used to plot the polar plot of current speed and direction

        # Current Speed:
        fig.add_trace(go.Scatter(x=current_speed.index, y=current_speed['Current speed'],
        name='Current Speed'), row=1, col=1)
        # Temperature:
        fig.add_trace(go.Scatter(x=temperature.index, y=temperature['Temperature'],
        name='Water Temperature'), row=2, col=1)
        # Density:
        fig.add_trace(go.Scatter(x=density.index, y=density['Density'],
        name='Water Density'), row=3, col=1,)

        fig.add_trace(go.Barpolar(r=polar_data['r'], theta=polar_data['theta'],
        width=2.5, opacity=0.7, marker_line_color="black", name='Current Direction and Speed'),
         row=1, col=2)

        # Updating y_axis labels:
        fig.update_yaxes(title_text='m/s', row=1, col=1)
        fig.update_yaxes(title_text='Degrees Celsius', row=2, col=1)
        fig.update_yaxes(title_text='kg/meter^3', row=3, col=1)

        # Building title text string based on coordinate input:
        title_text = f'CDL Analytics Dashboard for Model Node Located at \
[Long:{long}     Lat:{lat}   Depth:{depth}]'

        fig.update_layout(title_text=title_text, xaxis_rangeslider_visible=False,
        showlegend=False)

        return fig

# Testing figure plotting:
dash_test = dashboard("C:\\Users\\teelu\\OneDrive\\Desktop\\concat-10april2019.dfsu")


# Dash App for testing:
app = dash.Dash()
app.layout = html.Div([
    dcc.Graph(figure=dash_test.plot_node_data(-63.08325873, 11.29754091, -2.322656))
])

app.run_server(debug=True)
